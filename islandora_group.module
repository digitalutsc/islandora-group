<?php

/**
 * @file
 * Contains islandora_group.module.
 */

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\media\MediaInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\islandora_group\Utilities;
use Drupal\Core\Entity\EntityInterface;
/**
 * Implements hook_help().
 */
function islandora_group_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        // Main module help for the islandora_group module.
        case 'help.page.islandora_group':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('My Awesome Module') . '</p>';
            return $output;

        default:
    }
}

/**
 * Implements hook_theme().
 */
function islandora_group_theme() {
    return [
        'islandora_group' => [
            'render element' => 'children',
        ],
    ];
}

/**
 * Implements hook_entity_insert
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_insert(EntityInterface $entity) {
    Utilities::sync_associated_taxonomy_with_group($entity, "insert");
}

/**
 * Implements hook_entity_update
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_update(EntityInterface $entity) {
    Utilities::sync_associated_taxonomy_with_group($entity, "update");
}

/**
 * Implements hook_entity_delete
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_delete(EntityInterface $entity) {
    Utilities::sync_associated_taxonomy_with_group($entity, "delete");
}

/**
 * Implements hook_form_alter
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return void
 */
function islandora_group_form_alter(&$form, &$form_state, $form_id) {

     if (str_starts_with($form_id, "group_content_group_content_type")  && str_ends_with($form_id, "_delete_form")) {
        // when insert update
        $form['actions']['submit']['#submit'][] = 'form_submit_delete_relation_untagging_entity_to_group';
    }

}

/**
 * Implements hook_node_delete().
 */
function islandora_group_node_delete(NodeInterface $node) {
    // Remove content from all groups.
    foreach (GroupContent::loadByEntity($node) as $group_content) {
        $group_content->delete();
    }
}

/**
 * Implements hook_media_delete().
 */
function islandora_group_media_delete(MediaInterface $media) {
    foreach (GroupContent::loadByEntity($media) as $group_content) {
        $group_content->delete();
    }
}

/**
 * Implements hook_node_insert().
 */
function islandora_group_node_insert(NodeInterface $node) {
    // add this node to group
    if (count(GroupContent::loadByEntity($node)) <= 0) {
        Utilities::adding_islandora_object_to_group($node);
    }
}

/**
 * Implements hook_node_update().
 */
function islandora_group_node_update(NodeInterface $node) {
    // add this node to group
    /*if (count(GroupContent::loadByEntity($node)) <= 0) {
        Utilities::adding_islandora_object_to_group($node);
    }*/
}

/**
 * Implements hook_media_insert().
 */
function islandora_group_media_insert(MediaInterface $media) {
    // add this node to group
    if (count(GroupContent::loadByEntity($media)) <= 0) {
        Utilities::adding_media_only_into_group($media);
    }
}

/**
 * Implements hook_media_update().
 */
function islandora_group_media_update(MediaInterface $media) {
    // add this node to group
    /*if (count(GroupContent::loadByEntity($media)) <= 0) {
        Utilities::adding_media_only_into_group($media);
    }*/
}

