<?php

/**
 * @file
 * Contains islandora_group.module.
 */

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\media\MediaInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\islandora_group\Utilities;
use Drupal\Core\Entity\EntityInterface;
/**
 * Implements hook_help().
 */
function islandora_group_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        // Main module help for the islandora_group module.
        case 'help.page.islandora_group':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('My Awesome Module') . '</p>';
            return $output;

        default:
    }
}

/**
 * Implements hook_theme().
 */
function islandora_group_theme() {
    return [
        'islandora_group' => [
            'render element' => 'children',
        ],
    ];
}

/**
 * Implements hook_entity_insert
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_insert(EntityInterface $entity) {
    Utilities::sync_associated_taxonomy_with_group($entity, "insert");
}

/**
 * Implements hook_entity_update
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_update(EntityInterface $entity) {
    Utilities::sync_associated_taxonomy_with_group($entity, "update");
}

/**
 * Implements hook_entity_delete
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_delete(EntityInterface $entity) {
    Utilities::sync_associated_taxonomy_with_group($entity, "delete");
}

/**
 * Implements hook_form_alter
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return void
 */
function islandora_group_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id === "node_islandora_object_edit_form") {
        // when update node form
        $form['actions']['submit']['#submit'][] = 'form_submit_update_tagging_node_to_group';
    }
    else if ($form_id === "node_islandora_object_form") {
        // when insert node form
        $form['actions']['submit']['#submit'][] = 'form_submit_insert_tagging_node_to_group';
    }
    else if (str_starts_with($form_id, "media_")  && str_ends_with($form_id, "_edit_form")) {
        // when update media form
        $form['actions']['submit']['#submit'][] = 'form_submit_update_tagging_media_to_group';
    }
    else if (str_starts_with($form_id, "media_")  && str_ends_with($form_id, "_add_form")) {
        // when insert update
        $form['actions']['submit']['#submit'][] = 'form_submit_insert_tagging_media_to_group';
    }
    else if (str_starts_with($form_id, "group_content_group_content_type")  && str_ends_with($form_id, "_delete_form")) {
        // when insert update
        $form['actions']['submit']['#submit'][] = 'form_submit_delete_relation_untagging_entity_to_group';
    }

}

/**
 * @param $form
 * @param $form_state
 * @return void
 */
function form_submit_delete_relation_untagging_entity_to_group($form, $form_state) {
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {
        $entity = $form_object->getEntity();
        if ($entity->getEntityTypeId() === 'group_content') {
            $group_content = $entity;
            $group = $group_content->getGroup();
            if ($entity->getEntity()->getEntityTypeId() === "node") {
                $node = $group_content->getEntity();

                // update field access terms in node level
                Utilities::clear_term_in_field_access_terms($node, $group->label());
            }
            else if ($entity->getEntity()->getEntityTypeId() === "media") {
                $media = $group_content->getEntity();

                // update field access terms in media level
                Utilities::clear_term_in_field_access_terms($media, $group->label());
            }
        }
    }
}


/**
 * Override form submit when tagging node to group when insert at /node/add
 * @param $form
 * @param $form_state
 * @return void
 */
function form_submit_insert_tagging_node_to_group($form, $form_state) {
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {

        // get the entity from form
        $entity = $form_object->getEntity();

        // add node to group
        Utilities::adding_islandora_object_to_group($entity);
    }
}

/**
 * Override form submit for edit form at /node/nid/edit
 * @param $form
 * @param $form_state
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function form_submit_update_tagging_node_to_group($form, $form_state) {
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {

        // get the entity from form
        $entity = $form_object->getEntity();

        // add node to group
        Utilities::adding_islandora_object_to_group($entity);

        // redirect if the islandora_object is a collection
        Utilities::redirect_adding_childrennode_to_group($form, $form_state, $entity);
    }

}

/**
 * Form submit insert tagging media to group at /media/{{id}}/add
 * @param $form
 * @param $form_state
 * @return void
 */
function form_submit_insert_tagging_media_to_group($form, $form_state) {
    // For media has parent node, but has different acess term set
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {
        $media = $form_object->getEntity();

        // add media only to group
        Utilities::adding_media_only_into_group($media);

        // if media has a parent node
        /*$node = \Drupal::service('islandora.utils')->getParentNode($media);
        if (!empty($node)) {
            // add media to group based on the node permission
            adding_media_of_islandora_object_to_group($node, $media);
        }
        else {
            // add media only to group
            Utilities::adding_media_only_into_group($media);
        }*/
    }
}

/**
 * Form submit update tagging media to groups at /media/{{id}}/edit
 * @param $form
 * @param $form_state
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function form_submit_update_tagging_media_to_group($form, $form_state) {
    // For media has parent node, but has different acess term set
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {
        $media = $form_object->getEntity();

        // add media only to group
        Utilities::adding_media_only_into_group($media);

        // if media has a parent node
        /*$node = \Drupal::service('islandora.utils')->getParentNode($media);
        if (!empty($node)) {
            // add media to group
            adding_media_of_islandora_object_to_group($node, $media);
        }
        else {
            // add media only to group
            Utilities::adding_media_only_into_group($media);
        }*/
    }
}


/**
 * Implements hook_node_delete().
 */
function islandora_group_node_delete(NodeInterface $node) {
    // Remove content from all groups.
    foreach (GroupContent::loadByEntity($node) as $group_content) {
        $group_content->delete();
    }
}

/**
 * Implements hook_media_delete().
 */
function islandora_group_media_delete(MediaInterface $media) {
    foreach (GroupContent::loadByEntity($media) as $group_content) {
        $group_content->delete();
    }
}



