<?php

/**
 * @file
 * Contains islandora_group.module.
 */

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\media\MediaInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_help().
 */
function islandora_group_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        // Main module help for the islandora_group module.
        case 'help.page.islandora_group':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('My Awesome Module') . '</p>';
            return $output;

        default:
    }
}

/**
 * Implements hook_theme().
 */
function islandora_group_theme() {
    return [
        'islandora_group' => [
            'render element' => 'children',
        ],
    ];
}

/**
 * Implements hook_entity_insert
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
    sync_associated_taxonomy_with_group($entity, "insert");
}

/**
 * Implements hook_entity_update
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
    sync_associated_taxonomy_with_group($entity, "update");
}

/**
 * Implements hook_entity_delete
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function islandora_group_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
    sync_associated_taxonomy_with_group($entity, "delete");
}

/**
 * Implements hook_form_alter
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return void
 */
function islandora_group_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id === "node_islandora_object_edit_form") {
        // when update node form
        $form['actions']['submit']['#submit'][] = 'form_submit_update_tagging_node_to_group';
    }
    else if ($form_id === "node_islandora_object_form") {
        // when insert node form
        $form['actions']['submit']['#submit'][] = 'form_submit_insert_tagging_node_to_group';
    }
    else if (str_starts_with($form_id, "media_")  && str_ends_with($form_id, "_edit_form")) {
        // when update media form
        $form['actions']['submit']['#submit'][] = 'form_submit_update_tagging_media_to_group';
    }
    else if (str_starts_with($form_id, "media_")  && str_ends_with($form_id, "_add_form")) {
        // when insert update
        $form['actions']['submit']['#submit'][] = 'form_submit_insert_tagging_media_to_group';
    }
    else if (str_starts_with($form_id, "group_content_group_content_type")  && str_ends_with($form_id, "_delete_form")) {
        // when insert update
        $form['actions']['submit']['#submit'][] = 'form_submit_delete_relation_untagging_entity_to_group';
    }

}

/**
 * @param $form
 * @param $form_state
 * @return void
 */
function form_submit_delete_relation_untagging_entity_to_group($form, $form_state) {
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {
        $entity = $form_object->getEntity();
        if ($entity->getEntityTypeId() === 'group_content') {
            $group_content = $entity;
            $group = $group_content->getGroup();
            if ($entity->getEntity()->getEntityTypeId() === "node") {
                $node = $group_content->getEntity();

                // update field access terms in node level
                clear_term_in_field_access_terms($node, $group->label());
            }
            else if ($entity->getEntity()->getEntityTypeId() === "media") {
                $media = $group_content->getEntity();

                // update field access terms in media level
                clear_term_in_field_access_terms($media, $group->label());
            }
        }
    }
}


/**
 * Override form submit when tagging node to group when insert at /node/add
 * @param $form
 * @param $form_state
 * @return void
 */
function form_submit_insert_tagging_node_to_group($form, $form_state) {
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {

        // get the entity from form
        $entity = $form_object->getEntity();

        // add node to group
        adding_islandora_object_to_group($entity);
    }
}

/**
 * Override form submit for edit form at /node/nid/edit
 * @param $form
 * @param $form_state
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function form_submit_update_tagging_node_to_group($form, $form_state) {
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {

        // get the entity from form
        $entity = $form_object->getEntity();

        // add node to group
        adding_islandora_object_to_group($entity);

        // redirect if the islandora_object is a collection
        redirect_adding_childrennode_to_group($form, $form_state, $entity);
    }

}

/**
 * Adding nodes to group
 * @param $entity
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function adding_islandora_object_to_group($entity) {
    // Exit early if it has no access terms
    if (!$entity->hasField('field_access_terms')) {
        return;
    }

    // Arrange groups keyed by their name so we can look them up later.
    $groups_by_name = arrange_group_by_name();

    // clear out group relations with islandora_object first
    clear_group_relation_by_islandora_object($entity);

    // Get the access terms for the node.
    $terms = $entity->get('field_access_terms')->referencedEntities();
    if (empty($terms)) {
        // no term, exist
        return;
    }

    // if there is terms in field_access_term
    foreach ($terms as $term) {
        if (isset($groups_by_name[$term->label()])) {
            $group = $groups_by_name[$term->label()];
            $group->addContent($entity, 'group_node:' . $entity->bundle());
        }
    }

    // Reindex media since things have changed.
    foreach (\Drupal::service('islandora.utils')->getMedia($entity) as $media) {
        // untag existing
        //$media->set('field_access_terms', []);
        untag_existed_field_access_terms($media);

        // tag media with same terms as islandora_object
        foreach ($terms as $term) {
            if (isset($groups_by_name[$term->label()])) {
                $media->field_access_terms[] = ['target_id' => $term->id()];
            }
        }
        $media->save();


        // add media to group
        adding_media_only_into_group($media);
    }

}

/**
 * @param $entity
 * @return void
 */
function untag_existed_field_access_terms($entity) {
    $terms = $entity->get('field_access_terms')->referencedEntities();
    $i = 0;
    foreach ($terms as $term) {
        if ($entity->get("field_access_terms")->get($i) !== null) {
            print_log("Remove tag here ");
            $entity->get("field_access_terms")->removeItem($i);
            $entity->save();
        }
        $i++;
    }
}

/**
 * Tag a media in to Group
 * @param MediaInterface $media
 * @return void
 */
function adding_media_only_into_group(MediaInterface $media) {
    // For standalone media (no parent node)
    if (!$media->hasField('field_access_terms')) {
        return;
    }

    // clear group relation with media
    clear_group_relation_by_media($media);

    // get field_access_terms
    $terms = $media->get('field_access_terms')->referencedEntities();
    if (empty($terms)) {
        // no term, exit;
        return;
    }

    // Arrange groups keyed by their name so we can look them up later.
    $groups_by_name = arrange_group_by_name();

    foreach ($terms as $term) {
        if (isset($groups_by_name[$term->label()])) {
            $group = $groups_by_name[$term->label()];
            $group->addContent($media, 'group_media:' . $media->bundle());
        }
    }
}

/**
 * Clear out existing Group-entity relations
 *
 * @param $entity
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function clear_group_relation_by_islandora_object($entity) {
    // for each term, loop through groups-entity
    foreach (GroupContent::loadByEntity($entity) as $group_content) {
        $group_content->delete();
    }
    foreach (\Drupal::service('islandora.utils')->getMedia($entity) as $media) {
        clear_group_relation_by_media($media);
    }
}

/**
 * Clear out existing Group-entity relations
 *
 * @param $entity
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function clear_group_relation_by_media($media) {
    foreach (GroupContent::loadByEntity($media) as $group_content) {
        $group_content->delete();
    }
}

/**
 * Remove term(s) in field_access_terms.
 * @param $ne
 * @return void
 */
function clear_term_in_field_access_terms($ne, $group_name) {
    // TODO: search if the node->field_access_terms contain group name
    if (!$ne->hasField('field_access_terms')) {
        return;
    }
    // Get the access terms for the node.
    $terms = $ne->get('field_access_terms')->referencedEntities();
    $i = 0;

    foreach ($terms as $term) {
        if ($term->label() === $group_name) {
            $ne->get("field_access_terms")->removeItem($i);
            $ne->save();
            break;
        }
        $i++;
    }
}

/**
 * Redirect to confirm form to add Children nodes to groups
 * @param $form
 * @param $form_state
 * @param $entity
 * @return void
 */
function redirect_adding_childrennode_to_group($form, $form_state, $entity) {
    if ($entity->hasField('field_model') ) {
        // Get associated term model
        $term_id = $entity->get("field_model")->getValue()[0]['target_id'];
        $term_name = Term::load($term_id)->get('name')->value;

        // if collection, redirect to the Confirm form with selecting children to tag
        if ($term_name === "Collection") {
            // check if this node is collection, redirect to confirm form
            $form_state->setRedirect('islandora_group.recursive_apply_accesscontrol', [
                'nid' => $entity->id(),
            ]);
        }
    }
}


/**
 * Form submit insert tagging media to group at /media/{{id}}/add
 * @param $form
 * @param $form_state
 * @return void
 */
function form_submit_insert_tagging_media_to_group($form, $form_state) {
    // For media has parent node, but has different acess term set
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {
        $media = $form_object->getEntity();

        // add media only to group
        adding_media_only_into_group($media);

        // if media has a parent node
        /*$node = \Drupal::service('islandora.utils')->getParentNode($media);
        if (!empty($node)) {
            // add media to group based on the node permission
            adding_media_of_islandora_object_to_group($node, $media);
        }
        else {
            // add media only to group
            adding_media_only_into_group($media);
        }*/
    }
}

/**
 * Form submit update tagging media to groups at /media/{{id}}/edit
 * @param $form
 * @param $form_state
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function form_submit_update_tagging_media_to_group($form, $form_state) {
    // For media has parent node, but has different acess term set
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof EntityForm) {
        $media = $form_object->getEntity();

        // add media only to group
        adding_media_only_into_group($media);

        // if media has a parent node
        /*$node = \Drupal::service('islandora.utils')->getParentNode($media);
        if (!empty($node)) {
            // add media to group
            adding_media_of_islandora_object_to_group($node, $media);
        }
        else {
            // add media only to group
            adding_media_only_into_group($media);
        }*/
    }
}

/**
 * Implements hook_node_delete().
 */
function islandora_group_node_delete(NodeInterface $node) {
    // Remove content from all groups.
    foreach (GroupContent::loadByEntity($node) as $group_content) {
        $group_content->delete();
    }
}

/**
 * Implements hook_media_delete().
 */
function islandora_group_media_delete(MediaInterface $media) {
    foreach (GroupContent::loadByEntity($media) as $group_content) {
        $group_content->delete();
    }
}

/**
 * Create a taxonomy term which is the same name with Group
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return void
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function sync_associated_taxonomy_with_group(Drupal\Core\Entity\EntityInterface $entity, string $action) {
    if ($entity->getEntityTypeId() === "group") {
        $group_type = $entity->bundle();

        // get the Group associated taxonomy vocabulary

        $taxonomy = "islandora_access";

        // create the taxonomy term which has the same name as Group Name
        $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($taxonomy);

        // create an taxonomy term which has the same name as group name.
        $existedTerm = null;
        foreach ($terms as $term) {
            if ($term->name === $entity->label()) {
                $existedTerm = $term;
                break;
            }
        }
        switch ($action) {
            case "insert":
            case "update":
                {
                    // if no found terms, create new one
                    if ($existedTerm == null) {
                        \Drupal\taxonomy\Entity\Term::create([
                            'name' => $entity->label(),
                            'vid' => $taxonomy,
                        ])->save();
                    }
                    break;
                }
            case "delete":
                {
                    if ($existedTerm != null) {
                        $controller = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
                        $tobedeleted = $controller->loadMultiple([$existedTerm->tid]);
                        $controller->delete($tobedeleted);
                    }
                    break;
                }
            default:
                {
                    break;
                }
        }
    }
}
/**
 * Return arranged array of Groups with names
 * @return array
 */
function arrange_group_by_name(): array {
    // Arrange groups keyed by their name so we can look them up later.
    $groups = \Drupal::service('entity_type.manager')->getStorage('group')->loadMultiple();
    $groups_by_name = [];
    foreach ($groups as $group) {
        $groups_by_name[$group->label()] = $group;
    }
    return $groups_by_name;
}

/**
 * Debug function: display any variable to error log.
 *
 * @param $thing
 */
if (!function_exists('print_log')) {

    /**
     * Print log to apache log.
     */
    function print_log($thing) {
        error_log(print_r($thing, TRUE), 0);
    }

}
/**
 * Debug function: display any variable to current webpage.
 *
 * @param $thing
 */
if (!function_exists('logging')) {

    /**
     * Print log to webpage.
     */
    function logging($thing) {
        echo "<pre>";
        print_r($thing);
        echo "</pre>";
    }

}

/**
 * Debug function: display any variable to drupal Reports Log messages.
 */
if (!function_exists('drupal_log')) {

    /**
     * Print log in Recent Log messages.
     */
    function drupal_log($msg, $type = "error") {
        switch ($type) {
            case "notice":
                \Drupal::logger(basename(__FILE__, '.module'))->notice($msg);
                break;

            case "log":
                \Drupal::logger(basename(__FILE__, '.module'))->log(RfcLogLevel::NOTICE, $msg);
                break;

            case "warning":
                \Drupal::logger(basename(__FILE__, '.module'))->warning($msg);
                break;

            case "alert":
                \Drupal::logger(basename(__FILE__, '.module'))->alert($msg);
                break;

            case "critical":
                \Drupal::logger(basename(__FILE__, '.module'))->critical($msg);
                break;

            case "debug":
                \Drupal::logger(basename(__FILE__, '.module'))->debug($msg);
                break;

            case "info":
                \Drupal::logger(basename(__FILE__, '.module'))->info($msg);
                break;

            case "emergency":
                \Drupal::logger(basename(__FILE__, '.module'))->emergency($msg);
                break;

            default:
                \Drupal::logger(basename(__FILE__, '.module'))->error($msg);
                break;
        }
    }

}